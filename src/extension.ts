/* eslint-disable no-console */
import * as vscode from "vscode";

let humanLines = 0;
let aiLines = 0;
let currentPanel: vscode.WebviewPanel | null = null;
let debounceTimer: ReturnType<typeof setTimeout> | null = null;
let pendingChange: vscode.TextDocumentChangeEvent | null = null;
let statusBar: vscode.StatusBarItem;

// Output logs
const outputChannel = vscode.window.createOutputChannel("AI Tracker Logs");

// Decorations
const humanDecoration = vscode.window.createTextEditorDecorationType({
  backgroundColor: "rgba(76,175,80,0.15)",
  overviewRulerColor: "rgba(76,175,80,0.7)",
  overviewRulerLane: vscode.OverviewRulerLane.Right,
});
const aiDecoration = vscode.window.createTextEditorDecorationType({
  backgroundColor: "rgba(244,67,54,0.15)",
  overviewRulerColor: "rgba(244,67,54,0.7)",
  overviewRulerLane: vscode.OverviewRulerLane.Right,
});

function log(message: string, data?: any) {
  const msg = data ? `${message} ${JSON.stringify(data)}` : message;
  console.log(msg);
  outputChannel.appendLine(msg);
}

function sendUpdateToDashboard() {
  if (currentPanel?.webview) {
    currentPanel.webview.postMessage({ human: humanLines, ai: aiLines });
  }
}

function updateStatusBar() {
  if (statusBar) {
    statusBar.text = `👨‍💻 ${humanLines} | 🤖 ${aiLines}`;
    statusBar.show();
  }
}

// ---------------- Debounce ----------------
function scheduleProcess(change: vscode.TextDocumentChangeEvent) {
  pendingChange = change;
  if (debounceTimer) clearTimeout(debounceTimer);
  debounceTimer = setTimeout(() => {
    if (pendingChange) processChange(pendingChange);
    pendingChange = null;
  }, 300);
}

// ---------------- Core Logic ----------------
function processChange(event: vscode.TextDocumentChangeEvent) {
  if (!event.contentChanges.length) return;

  let insertedLines = 0;
  let isAI = false;

  // Count actual *new lines* only (not every keystroke)
  for (const c of event.contentChanges) {
    const added = c.text.split("\n").length - 1;
    if (added > 0) insertedLines += added;
  }
  if (insertedLines === 0) return; // nothing new on line level

  const insertedText = event.contentChanges.map((c) => c.text).join("");
  const looksLikeAI =
    insertedLines > 3 ||
    insertedText.length > 200 ||
    /Generated by|AI|Copilot|ChatGPT|Codeium/i.test(insertedText);

  if (looksLikeAI) {
    isAI = true;
    aiLines += insertedLines;
  } else {
    isAI = false;
    humanLines += insertedLines;
  }

  const editor = vscode.window.activeTextEditor;
  if (editor) {
    const aiRanges: vscode.DecorationOptions[] = [];
    const humanRanges: vscode.DecorationOptions[] = [];

    for (const change of event.contentChanges) {
      if (!change.text.includes("\n")) continue; // only highlight new lines
      const start = change.range.start;
      const end = editor.document.positionAt(
        editor.document.offsetAt(start) + change.text.length
      );
      const range = new vscode.Range(start, end);

      if (isAI)
        aiRanges.push({
          range,
          hoverMessage: "🤖 AI-generated code",
        });
      else
        humanRanges.push({
          range,
          hoverMessage: "👨‍💻 Human-written code",
        });
    }

    editor.setDecorations(aiDecoration, aiRanges);
    editor.setDecorations(humanDecoration, humanRanges);
  }

  log("🧮 Updated (line-based)", { humanLines, aiLines, insertedLines });
  updateStatusBar();
  sendUpdateToDashboard();
}

// ---------------- Activate ----------------
export function activate(context: vscode.ExtensionContext) {
  outputChannel.show(true);
  log("🚀 AI Tracker (line-based) activated");

  statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);
  updateStatusBar();
  context.subscriptions.push(statusBar);

  vscode.workspace.onDidChangeTextDocument((event) => {
    if (event.document.uri.scheme !== "file") return;
    if (!event.contentChanges.some((c) => c.text.length > 0)) return;
    scheduleProcess(event);
  });

  // -------- Dashboard Command --------
  const showDashboard = vscode.commands.registerCommand(
    "aianalytics.showStats",
    () => {
      if (currentPanel) {
        currentPanel.reveal(vscode.ViewColumn.One);
        return;
      }

      currentPanel = vscode.window.createWebviewPanel(
        "aiStats",
        "AI vs Human Live Stats",
        vscode.ViewColumn.One,
        { enableScripts: true }
      );
      context.subscriptions.push(currentPanel);

      const htmlPath = vscode.Uri.joinPath(context.extensionUri, "src", "dashboard.html");
      vscode.workspace.fs.readFile(htmlPath).then((data) => {
        let html = data.toString();
        html = html.replace(
          "</body>",
          `
          <script>
            const HUMAN_VALUE = ${humanLines};
            const AI_VALUE = ${aiLines};
          </script>
        </body>`
        );
        currentPanel!.webview.html = html;
        log("📊 Dashboard opened", { humanLines, aiLines });

        currentPanel!.webview.onDidReceiveMessage((msg) => {
          if (msg === "ready") sendUpdateToDashboard();
          if (msg.command === "reset") {
            humanLines = 0;
            aiLines = 0;
            vscode.window.showInformationMessage("AI Tracker stats reset.");
            updateStatusBar();
            sendUpdateToDashboard();
          }
        });
      });

      currentPanel.onDidDispose(() => {
        log("🪣 Dashboard closed");
        currentPanel = null;
      });
    }
  );

  context.subscriptions.push(showDashboard);
}

export function deactivate() {
  humanDecoration.dispose();
  aiDecoration.dispose();
  log("🧹 Extension deactivated");
}
